import fs from "node:fs";
import path from "node:path";
import { dedupeArray, unionType } from "./utils.ts";

console.log("Generating samples map");

const topicsRoot = path.resolve("..", "data");

const topicEntries: Record<string, Record<string, string[]>> = {};

const locales = fs.readdirSync(topicsRoot).filter((item) => {
  const fullPath = path.join(topicsRoot, item);
  return fs.statSync(fullPath).isDirectory();
});

console.log(`[Info] Found ${locales.length} locale(s): ${locales}.`);

for (const locale of locales) {
  topicEntries[locale] = {};
  const localePath = path.join(topicsRoot, locale);

  // Read all topic directories inside the locale
  const topicIds = fs.readdirSync(localePath).filter((item) => {
    const fullPath = path.join(localePath, item);
    return fs.statSync(fullPath).isDirectory();
  });

  console.log(`[Info] Found ${topicIds.length} topic(s) for locale ${locale}.`);

  for (const topicId of topicIds) {
    const topicPath = path.join(localePath, topicId);

    const { introduction, sampleFiles } = fs
      .readdirSync(topicPath)
      .filter((sample) => {
        const fullPath = path.join(topicPath, sample);
        const isMarkdownFile = path.extname(fullPath).toLowerCase() === ".md";

        return fs.statSync(fullPath).isFile() && isMarkdownFile;
      })
      .map((sample) => path.join("data", locale, topicId, sample))
      .reduce<{ introduction: string | null; sampleFiles: string[] }>(
        (acc, item) => {
          const isReadme = path.basename(item).toLowerCase() === "readme.md";
          if (isReadme) {
            return { ...acc, introduction: item };
          }

          return { ...acc, sampleFiles: [...acc.sampleFiles, item] };
        },
        { introduction: null, sampleFiles: [] },
      );

    if (!introduction) {
      console.warn(
        `[Warn]: skipping ${topicId} because it does not contain a README.md file`,
      );
    }

    topicEntries[locale][topicId] = [];
    for (const sampleFile of sampleFiles) {
      const framework = path.parse(sampleFile).name;
      topicEntries[locale][topicId].push(framework);
    }
  }
}

const topicIds = dedupeArray(Object.values(topicEntries).flatMap(Object.keys));

const frameworks = dedupeArray(
  Object.values(topicEntries).map(Object.values).flat(2),
);

const fileContent = `// This file is generated automatically. Do not edit manually.
// A new file can be generated by running "npm run generate-samples-map" in the "/scripts" directory

${unionType(true, "Locale", locales)}
${unionType(true, "TopicId", topicIds)}
${unionType(true, "Framework", frameworks)}

export const samples = ${JSON.stringify(topicEntries, null, 2)} as const satisfies Record<Locale, Record<TopicId, Framework[]>>;
`;

fs.writeFileSync("../lib/src/generated.ts", fileContent);
