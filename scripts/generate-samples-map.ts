import fs from "node:fs";
import path from "node:path";
import { dedupeArray, unionType } from "./utils.ts";

console.log("Generating samples map");

const samplesRoot = path.resolve("..", "data");

// This array will hold each sample entry
const sampleEntries: Record<string, Record<string, string[]>> = {};

const locales = fs.readdirSync(samplesRoot).filter((item) => {
  const fullPath = path.join(samplesRoot, item);
  return fs.statSync(fullPath).isDirectory();
});

console.log(`[Info] Found ${locales.length} locale(s): ${locales}.`);

for (const locale of locales) {
  sampleEntries[locale] = {};
  const localePath = path.join(samplesRoot, locale);

  // Read all sample directories inside the locale
  const sampleIds = fs.readdirSync(localePath).filter((item) => {
    const fullPath = path.join(localePath, item);
    return fs.statSync(fullPath).isDirectory();
  });

  console.log(
    `[Info] Found ${sampleIds.length} sample(s) for locale ${locale}.`,
  );

  for (const sampleId of sampleIds) {
    const samplePath = path.join(localePath, sampleId);

    const { introduction, frameworkFiles } = fs
      .readdirSync(samplePath)
      .filter((item) => {
        const fullPath = path.join(samplePath, item);
        const isMarkdownFile = path.extname(fullPath).toLowerCase() === ".md";

        return fs.statSync(fullPath).isFile() && isMarkdownFile;
      })
      .map((item) => path.join("data", locale, sampleId, item))
      .reduce<{ introduction: string | null; frameworkFiles: string[] }>(
        (acc, item) => {
          const isReadme = path.basename(item).toLowerCase() === "readme.md";
          if (isReadme) {
            return { ...acc, introduction: item };
          }

          return { ...acc, frameworkFiles: [...acc.frameworkFiles, item] };
        },
        { introduction: null, frameworkFiles: [] },
      );

    if (!introduction) {
      console.warn(
        `[Warn]: skipping ${sampleId} because it does not contain a README.md file`,
      );
    }

    sampleEntries[locale][sampleId] = [];
    for (const frameworkFile of frameworkFiles) {
      const framework = path.parse(frameworkFile).name;
      sampleEntries[locale][sampleId].push(framework);
    }
  }
}

const sampleIds = dedupeArray(
  Object.values(sampleEntries).flatMap(Object.keys),
);

const frameworks = dedupeArray(
  Object.values(sampleEntries).map(Object.values).flat(2),
);

const fileContent = `// This file is generated automatically. Do not edit manually.
// A new file can be generated by running "npm run generate-samples-map" in the "/scripts" directory

${unionType(true, "Locale", locales)}
${unionType(true, "SampleId", sampleIds)}
${unionType(true, "Framework", frameworks)}

export const samples = ${JSON.stringify(sampleEntries, null, 2)} as const satisfies Record<Locale, Record<SampleId, Framework[]>>;
`;

fs.writeFileSync("../lib/src/generated.ts", fileContent);
